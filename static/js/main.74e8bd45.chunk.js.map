{"version":3,"sources":["utils/sudoku.js","components/Cell.js","components/Board.js","components/Legend.js","components/Game.js","index.js"],"names":["undefined","_","require","checkpuzzle","puzzle","board","tuple1","solveboard","answer","b1","b2","i","boardmatches","difficulty","state","length","solvenext","solvepuzzle","original","concat","guesses","deduce","count","remembered","pop","push","workspace","tuple2","pos","num","stuck","guess","figurebits","allowed","needed","numbers","listbits","pickbetter","map","val","key","tuple3","axis","x","n","bit","spots","y","posfor","tuple4","shuffleArray","bits","axismissing","e","list","b","c","t","max","Math","floor","random","boardforentries","entries","range","item","j","contents","removeElement","array","from","to","rest","slice","apply","makeArray","value","module","exports","makepuzzle","deduced","order","ratepuzzle","samples","total","tuple","Cell","props","className","divContent","bgColor","invalidIndex","cellIndex","solved","highlightNumber","clickedIndex","react_default","a","createElement","readOnly","autoFocus","type","style","backgroundColor","onClick","onKeyDown","Board","_this","this","stack","id","index","components_Cell","nextPuzzle","Component","Legend","sudoku","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","history","location","Array","fill","solvePuzzle","stepNumber","isEqual","setState","current","currentPuzzle","keyCode","number","validateCell","alert","row","col","squareRow","squareCol","squareUnits","verticalUnits","horizontalUnits","indexOf","union","step","_this2","moves","move","desc","fontWeight","jumpTo","components_Board","handleBoardClick","handleKeyDown","components_Legend","handleLegendClick","ReactDOM","render","components_Game","document","getElementById"],"mappings":"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","file":"static/js/main.74e8bd45.chunk.js","sourcesContent":["// Sudoku Generator and Solver for node.js\r\n// Copyright (c) 2011 Blagovest Dachev.  All rights reserved.\r\n//\r\n// This is a port of David Bau's python  implementation:\r\n// http://davidbau.com/archives/2006/09/04/sudoku_generator.html\r\n\r\nvar undefined;\r\nvar _ = require('lodash');\r\n\r\nfunction makepuzzle(board) {\r\n\tvar puzzle  = [];\r\n\tvar deduced = makeArray(81, null);\r\n\tvar order   = _.range(81);\r\n\r\n\tshuffleArray(order);\r\n\r\n\tfor (var i = 0; i < order.length; i++) {\r\n\t\tvar pos = order[i];\r\n\r\n\t\tif (deduced[pos] == null) {\r\n\t\t\tpuzzle.push({pos:pos, num:board[pos]});\r\n\t\t\tdeduced[pos] = board[pos];\r\n\t\t\tdeduce(deduced);\r\n\t\t}\r\n\t}\r\n\r\n\tshuffleArray(puzzle);\r\n\r\n\tfor (var i = puzzle.length - 1; i >= 0; i--) {\r\n\t\tvar e = puzzle[i];\r\n\t\tremoveElement(puzzle, i);\r\n\r\n\t\tvar rating = checkpuzzle(boardforentries(puzzle), board);\r\n\t\tif (rating == -1) {\r\n\t\t\tpuzzle.push(e);\r\n\t\t}\r\n\t}\r\n\r\n\treturn boardforentries(puzzle);\r\n}\r\n\r\nfunction ratepuzzle(puzzle, samples) {\r\n\tvar total = 0;\r\n\r\n\tfor (var i = 0; i < samples; i++) {\r\n\t\tvar tuple = solveboard(puzzle);\r\n\r\n\t\tif (tuple.answer == null) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\ttotal += tuple.state.length;\r\n\t}\r\n\r\n\treturn total / samples;\r\n}\r\n\r\nfunction checkpuzzle(puzzle, board) {\r\n\tif (board == undefined) {\r\n\t\tboard = null;\r\n\t}\r\n\r\n\tvar tuple1 = solveboard(puzzle);\r\n\tif (tuple1.answer == null) {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tif (board != null && boardmatches(board, tuple1.answer) == false) {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tvar difficulty = tuple1.state.length;\r\n\tvar tuple2     = solvenext(tuple1.state);\r\n\r\n\tif (tuple2.answer != null) {\r\n\t\treturn -1;\r\n\t}\r\n\t\r\n\treturn difficulty;\r\n}\r\n\r\nfunction solvepuzzle(board) {\r\n    return solveboard(board).answer;\r\n}\r\n\r\nfunction solveboard(original) {\r\n\tvar board   = [].concat(original);\r\n\tvar guesses = deduce(board);\r\n\r\n\tif (guesses == null) {\r\n\t\treturn {state:[], answer:board};\r\n\t}\r\n\r\n\tvar track = [{guesses:guesses, count:0, board:board}];\r\n\treturn solvenext(track);\r\n}\r\n\r\nfunction solvenext(remembered) {\r\n    while (remembered.length > 0) {\r\n    \tvar tuple1 = remembered.pop();\r\n\r\n    \tif (tuple1.count >= tuple1.guesses.length) {\r\n    \t\tcontinue;\r\n    \t}\r\n \r\n    \tremembered.push({guesses:tuple1.guesses, count:tuple1.count+1, board:tuple1.board});\r\n    \tvar workspace = [].concat(tuple1.board);\r\n    \tvar tuple2    = tuple1.guesses[tuple1.count];\r\n\r\n    \tworkspace[tuple2.pos] = tuple2.num;\r\n\r\n    \tvar guesses = deduce(workspace);\r\n\r\n    \tif (guesses == null) {\r\n\t    \treturn {state:remembered, answer:workspace};\r\n\t    }\r\n\r\n    \tremembered.push({guesses:guesses, count:0, board:workspace});\r\n\t}\r\n\r\n    return {state:[], answer:null};\r\n}\r\n\r\nfunction deduce(board) {\r\n\twhile (true) {\r\n\t\tvar stuck = true;\r\n\t\tvar guess = null;\r\n\t\tvar count = 0;\r\n\r\n\t    // fill in any spots determined by direct conflicts\r\n\t    var tuple1  = figurebits(board);\r\n\t    var allowed = tuple1.allowed;\r\n\t    var needed  = tuple1.needed;\r\n\r\n\t    for (var pos = 0; pos < 81; pos++) {\r\n\t    \tif (board[pos] == null) {\r\n\t    \t\tvar numbers = listbits(allowed[pos]);\r\n\t    \t\tif (numbers.length == 0) {\r\n\t    \t\t\treturn [];\r\n\t    \t\t}\r\n\t    \t\telse if (numbers.length == 1) {\r\n\t    \t\t\tboard[pos] = numbers[0];\r\n\t    \t\t\tstuck = false;\r\n\t    \t\t}\r\n\t    \t\telse if (stuck == true) {\r\n\t    \t\t\tvar t = _.map(numbers, function(val, key) {\r\n\t    \t\t\t\treturn {pos:pos, num:val};\r\n\t    \t\t\t});\r\n\r\n\t    \t\t\tvar tuple2 = pickbetter(guess, count, t);\r\n\t    \t\t\tguess = tuple2.guess;\r\n\t    \t\t\tcount = tuple2.count;\r\n\t    \t\t}\r\n\t    \t}\r\n\t    }\r\n\r\n\t    if (stuck == false) {\r\n\t\t    var tuple3  = figurebits(board);\r\n\t\t    allowed = tuple3.allowed;\r\n\t\t    needed  = tuple3.needed;\r\n\t    }\r\n\r\n    \t// fill in any spots determined by elimination of other locations\r\n    \tfor (var axis = 0; axis < 3; axis++) {\r\n\t    \tfor (var x = 0; x < 9; x++) {\r\n        \t\tvar numbers = listbits(needed[axis * 9 + x]);\r\n\r\n\t\t    \tfor (var i = 0; i < numbers.length; i++) {\r\n\t\t    \t\tvar n     = numbers[i];\r\n\t\t            var bit   = 1 << n;\r\n          \t\t\tvar spots = [];\r\n\r\n\t\t\t    \tfor (var y = 0; y < 9; y++) {\r\n\t\t\t    \t\tvar pos = posfor(x, y, axis);\r\n\t\t\t    \t\tif (allowed[pos] & bit) {\r\n\t\t\t\t    \t\tspots.push(pos);\r\n\t\t\t\t    \t}\r\n\t\t\t    \t}\r\n\r\n\t\t\t    \tif (spots.length == 0) {\r\n\t\t\t\t    \treturn [];\r\n\t\t\t\t    }\r\n\t\t\t\t    else if (spots.length == 1) {\r\n\t\t\t\t\t    board[spots[0]] = n;\r\n\t\t\t\t\t    stuck = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (stuck) {\r\n\t\t    \t\t\tvar t = _.map(spots, function(val, key) {\r\n\t\t    \t\t\t\treturn {pos:val, num:n};\r\n\t\t    \t\t\t});\r\n\r\n\t\t    \t\t\tvar tuple4 = pickbetter(guess, count, t);\r\n\t\t    \t\t\tguess = tuple4.guess;\r\n\t\t    \t\t\tcount = tuple4.count;\r\n\t\t\t\t\t}\r\n\t\t    \t}\r\n\t    \t}\r\n    \t}\r\n\r\n    \tif (stuck == true) {\r\n    \t\tif (guess != null) {\r\n    \t\t\tshuffleArray(guess);\r\n    \t\t}\r\n\r\n    \t\treturn guess;\r\n    \t}\r\n\t}\r\n}\r\n\r\nfunction figurebits(board) {\r\n\tvar needed  = [];\r\n\tvar allowed = _.map(board, function(val, key) {\r\n\t\treturn val == null ? 511 : 0;\r\n\t}, []);\r\n\r\n\tfor (var axis = 0; axis < 3; axis++) {\r\n\t\tfor (var x = 0; x < 9; x++) {\r\n\t\t\tvar bits = axismissing(board, x, axis);\r\n\t\t\tneeded.push(bits);\r\n\r\n\t\t    for (var y = 0; y < 9; y++) {\r\n\t\t    \tvar pos = posfor(x, y, axis);\r\n\t\t        allowed[pos] = allowed[pos] & bits;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {allowed:allowed, needed:needed};\r\n}\r\n\r\nfunction posfor(x, y, axis) {\r\n\tif (axis == undefined) { axis = 0; }\r\n\r\n    if (axis == 0) {\r\n\t    return x * 9 + y;\r\n\t}\r\n\telse if (axis == 1) {\r\n\t\treturn y * 9 + x;\r\n\t}\r\n\r\n\treturn ([0,3,6,27,30,33,54,57,60][x] + [0,1,2,9,10,11,18,19,20][y])\r\n}\r\n\r\nfunction axisfor(pos, axis) {\r\n\tif (axis == 0) {\r\n\t\treturn Math.floor(pos / 9);\r\n\t}\r\n\telse if (axis == 1) {\r\n\t\treturn pos % 9;\r\n\t}\r\n\r\n\treturn Math.floor(pos / 27) * 3 + Math.floor(pos / 3) % 3;\r\n}\r\n\r\nfunction axismissing(board, x, axis) {\r\n\tvar bits = 0;\r\n\r\n\tfor (var y = 0; y < 9; y++) {\r\n\t\tvar e = board[posfor(x, y, axis)];\r\n\r\n\t\tif (e != null) {\r\n\t\t\tbits |= 1 << e;\r\n\t\t}\r\n\t}\r\n\r\n\treturn 511 ^ bits;\r\n}\r\n\r\nfunction listbits(bits) {\r\n    var list = [];\r\n\tfor (var y = 0; y < 9; y++) {\r\n\t\tif ((bits & (1 << y)) != 0) {\r\n\t\t\tlist.push(y);\r\n\t\t}\r\n\t}\r\n\r\n  return list;\r\n}\r\n\r\nfunction allowed(board, pos) {\r\n\tvar bits = 511;\r\n\r\n\tfor (var axis = 0; axis < 3; axis++) {\r\n\t\tvar x = axisfor(pos, axis);\r\n\t\tbits = bits & axismissing(board, x, axis);\r\n\t}\r\n\r\n\treturn bits;\r\n}\r\n\r\n// TODO: make sure callers utilize the return value correctly\r\nfunction pickbetter(b, c, t) {\r\n\tif (b == null || t.length < b.length) {\r\n\t\treturn {guess:t, count:1};\r\n\t}\r\n\telse if (t.length > b.length) {\r\n\t\treturn {guess:b, count:c};\r\n\t}\r\n\telse if (randomInt(c) == 0) {\r\n\t\treturn {guess:t, count:c+1};\r\n\t}\r\n\r\n\treturn {guess:b, count:c+1};\r\n}\r\n\r\nfunction boardforentries(entries) {\r\n\tvar board = _.map(_.range(81), function(val, key) {\r\n\t\treturn null;\r\n\t});\r\n\r\n\tfor (var i = 0; i < entries.length; i++) {\r\n\t\tvar item = entries[i];\r\n\t\tvar pos  = item.pos;\r\n\t\tvar num  = item.num;\r\n\r\n\t\tboard[pos] = num;\r\n\t}\r\n\r\n\treturn board;\r\n}\r\n\r\nfunction boardmatches(b1, b2) {\r\n\tfor (var i = 0; i < 81; i++) {\r\n\t\tif (b1[i] != b2[i]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nfunction randomInt(max) {\r\n\treturn Math.floor(Math.random() * (max+1));\r\n}\r\n\r\nfunction shuffleArray(original) {\r\n\t// Swap each element with another randomly selected one.\r\n    for (var i = 0; i < original.length; i++) {\r\n        var j = i;\r\n        while (j == i) {\r\n            j = Math.floor(Math.random() * original.length);\r\n        }\r\n        var contents = original[i];\r\n        original[i]  = original[j];\r\n        original[j]  = contents;\r\n    }\r\n}\r\n\r\nfunction removeElement(array, from, to) {\r\n    var rest = array.slice((to || from) + 1 || array.length);\r\n    array.length = from < 0 ? array.length + from : from;\r\n    return array.push.apply(array, rest);\r\n};\r\n\r\nfunction makeArray(length, value) {\r\n\treturn _.map(_.range(length), function(val, key) {\r\n\t\treturn value;\r\n\t})\r\n}\r\n\r\nmodule.exports = {\r\n\tmakepuzzle  : function () { return makepuzzle(solvepuzzle(makeArray(81, null))); },\r\n\tsolvepuzzle : solvepuzzle,\r\n\tratepuzzle  : ratepuzzle,\r\n\tposfor      : posfor,\r\n\tfigurebits  : figurebits\r\n};","import React from 'react';\r\n\r\nfunction Cell(props) {\r\n    let bgColor = props.invalidIndex === props.cellIndex ? 'red' : 'white';\r\n    let className;\r\n\r\n    if (props.solved) {\r\n        className = props.highlightNumber === props.value\r\n            ? 'cell solved highlighted'\r\n            : 'cell solved';\r\n    } else {\r\n        className = 'cell empty';\r\n    }\r\n\r\n    let divContent;\r\n    if (props.clickedIndex === props.cellIndex) {\r\n        divContent = <input\r\n            readOnly\r\n            autoFocus\r\n            type='text'\r\n            value={props.value}\r\n            style={{ backgroundColor: bgColor }}\r\n        />;\r\n    } else {\r\n        divContent = props.value\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={className}\r\n            onClick={props.onClick}\r\n            onKeyDown={props.onKeyDown}>\r\n            {divContent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\n\r\nclass Board extends Component {\r\n    render() {\r\n        const stack = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        return (\r\n            stack.map((item, i) => {\r\n                return (\r\n                    <div key={item} className='row' id={'row' + item} >\r\n                        {\r\n                            stack.map((item, j) => {\r\n                                let index = i * 9 + j;\r\n                                return (\r\n                                    <Cell\r\n                                        key={index}\r\n                                        cellIndex={index}\r\n                                        clickedIndex={this.props.clickedIndex}\r\n                                        solved={this.props.puzzle[index] !== null}\r\n                                        invalidIndex={this.props.invalidIndex}\r\n                                        highlightNumber={this.props.highlightNumber}\r\n                                        value={this.props.nextPuzzle[index] === null ? '' : this.props.nextPuzzle[index] + 1}\r\n                                        onClick={() => { this.props.onClick(index) }}\r\n                                        onKeyDown={(e) => { this.props.onKeyDown(e, index) }}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                );\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nfunction Legend(props) {\r\n    return (\r\n        <div\r\n            className='cell'\r\n            onClick={props.onClick}>\r\n            {props.value}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Legend;","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport Legend from './Legend';\r\nvar sudoku = require('../utils/sudoku');\r\nvar _ = require('lodash');\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const puzzle = sudoku.makepuzzle();\r\n        this.state = {\r\n            history: [{\r\n                puzzle: puzzle,\r\n                location: Array(2).fill(null),\r\n                invalidIndex: null\r\n            }],\r\n            solvePuzzle: sudoku.solvepuzzle(puzzle),\r\n            clickedIndex: null,\r\n            highlightNumber: null,\r\n            stepNumber: 0\r\n        };\r\n    }\r\n\r\n    handleBoardClick(index) {\r\n        if (this.state.history[this.state.stepNumber].invalidIndex !== null\r\n            || _.isEqual(this.state.history[this.state.stepNumber].puzzle, this.state.solvePuzzle)) {\r\n            return;\r\n        }\r\n\r\n        const puzzle = this.state.history[0].puzzle;\r\n        if (puzzle[index] !== null) {\r\n            this.setState({\r\n                highlightNumber: puzzle[index] + 1,\r\n                clickedIndex: null\r\n            });\r\n        } else {\r\n            this.setState({\r\n                highlightNumber: null,\r\n                clickedIndex: index\r\n            });\r\n        }\r\n    }\r\n\r\n    handleLegendClick(value) {\r\n        this.setState({\r\n            highlightNumber: value,\r\n            clickedIndex: null\r\n        });\r\n    }\r\n\r\n    handleKeyDown(e, index) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const currentPuzzle = current.puzzle.slice();\r\n        let location = current.location.slice();\r\n\r\n        //backspace, delete\r\n        if (e.keyCode == 8 || e.keyCode == 46) {\r\n            currentPuzzle[index] = null;\r\n            location = [Math.floor(index / 9) + 1, (index % 9) + 1];\r\n            current.puzzle = currentPuzzle;\r\n            current.location = location;\r\n            current.invalidIndex = null;\r\n            this.setState({\r\n                history: history\r\n            });\r\n        }\r\n        // ENTER, ESC\r\n        else if (e.keyCode == 13 || e.keyCode == 27) {\r\n            this.setState({\r\n                clickedIndex: null\r\n            });\r\n        }// digits between 1-9\r\n        else if (e.keyCode >= 49 && e.keyCode <= 57) {\r\n            let number = e.keyCode - 48;\r\n            currentPuzzle[index] = number - 1;\r\n            location = [Math.floor(index / 9) + 1, (index % 9) + 1];\r\n            let invalidIndex = this.validateCell(index, currentPuzzle[index]) ? null : index;\r\n            if (_.isEqual(current.location, location)) {\r\n                current.puzzle = currentPuzzle;\r\n                current.invalidIndex = invalidIndex;\r\n                this.setState({\r\n                    history: history\r\n                });\r\n            } else {\r\n                this.setState({\r\n\r\n                    history: history.concat([{\r\n                        puzzle: currentPuzzle,\r\n                        location: location,\r\n                        invalidIndex: invalidIndex\r\n                    }]),\r\n                    stepNumber: history.length\r\n                });\r\n            }\r\n\r\n            if (_.isEqual(currentPuzzle, this.state.solvePuzzle)) {\r\n                alert(\"Congratulation! It was solved.\")\r\n            }\r\n        }\r\n    }\r\n\r\n    validateCell(index, number) {\r\n        if (number === null) {\r\n            return true;\r\n        }\r\n        let row = Math.floor(index / 9),\r\n            col = index % 9,\r\n            squareRow = Math.floor(row / 3),\r\n            squareCol = Math.floor(col / 3);\r\n        let squareUnits = [],\r\n            verticalUnits = [],\r\n            horizontalUnits = [];\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const nextPuzzle = current.puzzle.slice();\r\n        for (let i = 0; i < 9; i++) {\r\n            horizontalUnits.push(nextPuzzle[row * 9 + i]);\r\n            verticalUnits.push(nextPuzzle[i * 9 + col]);\r\n        }\r\n\r\n        for (let i = squareRow * 3; i < (squareRow + 1) * 3; i++) {\r\n            for (let j = squareCol * 3; j < (squareCol + 1) * 3; j++) {\r\n                squareUnits.push(nextPuzzle[i * 9 + j]);\r\n            }\r\n        }\r\n        return _.indexOf(_.union(squareUnits, verticalUnits, horizontalUnits), number) < 0;\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const legend = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move + ' location: (' + step.location[0] + ', ' + step.location[1] + ')' :\r\n                'Go to game start';\r\n\r\n            return (\r\n                <li key={move}>\r\n                    <button style={{ fontWeight: (this.state.stepNumber === move ? 'bold' : 'normal') }} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"board\">\r\n                    <Board\r\n                        puzzle={history[0].puzzle}\r\n                        nextPuzzle={current.puzzle}\r\n                        clickedIndex={this.state.clickedIndex}\r\n                        invalidIndex={current.invalidIndex}\r\n                        highlightNumber={this.state.highlightNumber}\r\n                        onClick={(i) => { this.handleBoardClick(i) }}\r\n                        onKeyDown={(e, i) => { this.handleKeyDown(e, i) }}\r\n                    />\r\n                </div>\r\n                <div className=\"legend\">\r\n                    <div className=\"row\">\r\n                        {\r\n                            legend.map((item, index) => {\r\n                                return (\r\n                                    <Legend key={index}\r\n                                        value={item}\r\n                                        onClick={() => { this.handleLegendClick(item) }}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './components/Game';\r\n\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}